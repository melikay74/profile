{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","iconColor","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","Spinner","message","defaultProps","App","state","errorMessage","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","src_SeasonDisplay_0","src_Spinner","renderContent","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"4LAGMA,SAAe,CACnBC,OAAQ,CACNC,KAAM,uBACNC,SAAU,MACVC,UAAW,UAEbC,OAAQ,CACNH,KAAM,kBACNC,SAAU,YACVC,UAAW,UA+BAE,EAbO,SAACC,GACrB,IAfiBC,EAAKC,EAehBC,GAfWF,EAeQD,EAAMC,KAfTC,GAec,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAICK,EAEOb,EAAaU,GAA3CR,EAFuBW,EAEvBX,KAAMC,EAFiBU,EAEjBV,SAAUC,EAFOS,EAEPT,UAExB,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAsBR,IAClCI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,aAAAC,OAAef,EAAf,eAAAe,OAAqCd,KACjDU,EAAAC,EAAAC,cAAA,UAAKd,GACLY,EAAAC,EAAAC,cAAA,KAAGC,UAAS,cAAAC,OAAgBf,EAAhB,eAAAe,OAAsCd,OCpClDe,EAAU,SAACZ,GACf,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACZF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,SAAIT,EAAMa,YAMlBD,EAAQE,aAAe,CACrBD,QAAS,cAGID,QCXTG,6MAOJC,MAAQ,CAACf,IAAK,KAAMgB,aAAc,uFAGd,IAAAC,EAAAC,KAClBC,OAAOC,UAAUC,YAAYC,mBAC3B,SAAAC,GAAQ,OAAIN,EAAKO,SAAS,CAAExB,IAAKuB,EAASE,OAAOC,YACjD,SAAAC,GAAG,OAAIV,EAAKO,SAAS,CAACR,aAAcW,EAAIf,oDAK1C,OAAGM,KAAKH,MAAMC,eAAiBE,KAAKH,MAAMf,IACjCM,EAAAC,EAAAC,cAAA,qBAAaU,KAAKH,MAAMC,eAE5BE,KAAKH,MAAMC,cAAgBE,KAAKH,MAAMf,IAClCM,EAAAC,EAAAC,cAACoB,EAAD,CAAe5B,IAAOkB,KAAKH,MAAMf,MAEnCM,EAAAC,EAAAC,cAACqB,EAAD,CAASjB,QAAQ,8EAKxB,OACEN,EAAAC,EAAAC,cAAA,WACGU,KAAKY,wBA/BIC,IAAMC,WAqCxBC,IAASC,OACP5B,EAAAC,EAAAC,cAAC2B,EAAD,MACAC,SAASC,cAAc","file":"static/js/main.8bf54665.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig = {\n  summer: {\n    text: \"Let's hit the beach!\",\n    iconName: \"sun\",\n    iconColor: \"orange\"\n  },\n  winter: {\n    text: \"Brrr it's cold!\",\n    iconName: \"snowflake\",\n    iconColor: \"blue\"\n  }\n};\n\nconst getSeason = (lat, month) => {\n  // N. Hem: Apr-Sept = summer, Jan-Mar && Oct-Dec = winter\n  // N. Hem: lat > 0\n  \n  // summer = lat > 0: Apr-Sept, lat < 0: Jan-Mar && Oct-Dec \n  // winter = lat > 0: Jan-Mar && Oct-Dec, lat < 0: Apr-Sep \n\n  if (month > 2 && month < 9) {\n    return lat > 0 ? 'summer' : 'winter'; \n  } else {\n    return lat > 0 ? 'winter' : 'summer'; \n  } \n}\n\nconst SeasonDisplay = (props) => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  const { text, iconName, iconColor } = seasonConfig[season];\n  \n  return (\n    <div className = {`season-display ${season}`}>\n      <i className={`icon-left ${iconName} icon huge ${iconColor}` }></i>\n      <h1>{text}</h1>\n      <i className={`icon-right ${iconName} icon huge ${iconColor}`}></i>\n    </div>\n  )\n};\n\nexport default SeasonDisplay;","import React from 'react';\n\nconst Spinner = (props) => {\n  return (\n    <div className=\"ui active dimmer\">\n      <br /><br /><br />\n      <div className=\"ui big text loader\">\n        <p>{props.message}</p>\n      </div>\n    </div>\n  );\n}; \n\nSpinner.defaultProps = {\n  message: 'Loading...'\n};\n\nexport default Spinner;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\n\n\nclass App extends React.Component { \n  // DON'T NEED CONSTRUCTOR TO INITIALIZE STATE; CAN DEFINE IT AS BELOW, STATE = ...;\n  // constructor(props) {\n  //   super(props);\n  //   this.state = { lat: null, errorMessage: '' };\n  // }\n  \n  state = {lat: null, errorMessage: ''};\n\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      position => this.setState({ lat: position.coords.latitude}), \n      err => this.setState({errorMessage: err.message })\n    );\n  };\n\n  renderContent() {\n    if(this.state.errorMessage && !this.state.lat) {\n      return <div>Error: {this.state.errorMessage}</div>\n    }\n    if (!this.state.errorMessage && this.state.lat) {\n      return <SeasonDisplay lat = {this.state.lat} />\n    }\n    return <Spinner message=\"Please accept location request if asked.\" />\n  };\n  \n\n  render() {\n    return (\n      <div>\n        {this.renderContent()}\n      </div>\n    );  \n  };\n}\n\nReactDOM.render(\n  <App />,\n  document.querySelector('#root')\n);"],"sourceRoot":""}